[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "soundscapy"
dynamic = ["version"]
description = "A python library for analysing and visualising soundscape assessments."
authors = [
    { name = "Andrew Mitchell", email = "mitchellacoustics15@gmail.com" },
]
dependencies = [
    "pandas[excel]>=2.2.2",
    "seaborn>=0.13.2",
    "plotly>=5.23.0",
    "scipy>=1.14.1",
    "pyyaml>=6.0.2",
    "pydantic>=2.8.2",
    "loguru>=0.7.2",
    "numpy!=1.26",
]
readme = "README.md"
requires-python = ">= 3.10"
license = { text = "BSD-3-Clause" }
keywords = ["soundscape", "psychoacoustics", "acoustics", "audio analysis"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: BSD License",
]

[project.urls]
repository = "https://github.com/MitchellAcoustics/Soundscapy"
documentation = "https://soundscapy.readthedocs.io/en/latest/"

[project.optional-dependencies]
all = ["soundscapy[audio]", "soundscapy[spi]"]
audio = [
    "mosqito>=1.2.1",
    "scikit-maad>=1.4.3",
    "tqdm>=4.66.5",
    "numba>=0.59",
    "acoustic-toolbox>=0.1.2",
]
spi = ["rpy2>=3.5.0"]

[tool.uv]
default-groups = ["dev", "test", "docs"]

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "mypy>=1.15.0",
    "pre-commit>=4.2.0",
    "ruff>=0.7.2",
    "tox>=4.25.0",
    "twine>=6.1.0",
]
test = [
    "pytest>=8.3.3",
    "setuptools>=72.1.0",
    "nbmake>=1.5.4",
    "pytest-xdist>=3.6.1",
    "xdoctest[all]>=1.1.6",
    "pytest-mpl>=0.17.0",
    "pytest-cov>=6.0.0",
]
docs = [
    "jupyter>=1.1.1",
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.31",
    "mkdocs-jupyter>=0.24.8",
    "mkdocstrings[python]>=0.25.2",
    "pymdown-extensions>=10.9",
    "ipywidgets>=8.1.3",
    "jupyter-dash>=0.4.2",
    "mkdocs-include-markdown-plugin>=7.1.5",
]

[tool.uv.pip]
universal = true

[tool.pytest.ini_options]
addopts = ["--color=yes", "--import-mode=importlib", "--xdoctest", "--verbose"]
testpaths = ["test", "src/soundscapy"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
doctest_optionflags = "NUMBER NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL"
markers = [
    "optional_deps(group): mark tests that depend on optional dependencies. group can be 'audio', etc.",
    "slow: mark test as slow",
    "skip: mark test as skipped",
    "skipif: mark test as skipped if condition is met",
    "xfail: mark test as expected to fail",
    "parametrize: mark test as parametrized",
]

[tool.coverage]
report = { sort = "cover" }
run = { branch = true, parallel = true, source = ["soundscapy"] }
paths.source = ["src", ".tox*/*/lib/python*/site-packages"]

[tool.mypy]
explicit_package_bases = true

[tool.ruff]
fix = true
force-exclude = true
lint.ignore = [
    "COM812", # trailing commas (ruff-format recommended)
    "D203",   # no-blank-line-before-class
    "D212",   # multi-line-summary-first-line
    "D407",   # removed dashes lines under sections
    "D417",   # argument description in docstring (unreliable)
    "ISC001", # simplify implicit str concatenation (ruff-format recommended)
]
lint.per-file-ignores = { "tests*" = [
    "INP001", # File is part of an implicit namespace package.
    "S101",   # Use of `assert` detected
] }
lint.select = ["ALL"]
lint.isort.known-first-party = ["soundscapy"]
lint.mccabe.max-complexity = 18
lint.pep8-naming.classmethod-decorators = ["classmethod"]

[tool.setuptools_scm]
local_scheme = "no-local-version"
write_to = "src/soundscapy/_version.py"

[tool.setuptools.package-data]
mypkg = ["*.csv", "*.yaml"]

[tool.tomlsort]
all = true
spaces_indent_inline_array = 4
trailing_comma_inline_array = true
overrides."project.classifiers".inline_arrays = false
overrides."tool.coverage.paths.source".inline_arrays = false
overrides."tool.tox.env.docs.commands".inline_arrays = false
overrides."tool.tox.env_run_base.commands".inline_arrays = false
