name: Test Release

on:
  workflow_call:
    inputs:
      bump_rule:
        description: "Base version to test (major, minor, patch, dev, none)"
        type: string
        required: false
        default: 'dev'
    outputs:
      version:
        description: "The generated development version"
        value: ${{ jobs.test-release.outputs.new_version }}
  workflow_dispatch:
    inputs:
      bump_rule:
        description: "Base version to test (major, minor, patch, dev, none)"
        type: choice
        options: ['major', 'minor', 'patch', 'dev', 'none']
        required: true
        default: 'dev'
  pull_request:
    branches: [main]

jobs:
  # tests-pass:
  #   uses: ./.github/workflows/ci.yml

  test-release:
    # needs: tests-pass
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      # test-release-pass: ${{ github.event.inputs.test-release-pass }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.ref }} # needed for push after bump2version
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set commit configs (for bump2version)
      run: |
        # configure user
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
  
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with: 
        # install a specific version of uv
        version: "0.4.29"
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Setup Python
      run: uv python install 3.12

    - name: Install build dependencies
      run: |
        uv tool install bump2version

    - name: Generate development version
      id: version
      run: |
        # Handle different trigger types
        # TODO: If triggered from publish, use rc instead of dev
        BUMP_RULE="${{ inputs.bump_rule || 'dev' }}"

        if [ $BUMP_RULE == 'none' ]; then
          echo "Skipping version bump"
          # Get the current version
          grep 'current_version = ' .bumpversion.cfg | sed 's/current_version = //'
          echo "new_version=$(grep 'current_version = ' .bumpversion.cfg | sed 's/current_version = //')" >> $GITHUB_ENV
        else
          echo "Bumping version with rule: $BUMP_RULE"
          # Bump the version
          bump2version --allow-dirty --verbose --no-tag $BUMP_RULE --no-commit
          # git push # Need to push the new version change to the repo
          
          # Store version for later use
          echo "new_version=$(grep 'current_version = ' .bumpversion.cfg | sed 's/current_version = //')" >> $GITHUB_ENV
        fi

    - name: Build package
      run: uv build

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        attestations: false
        verbose: true
        skip-existing: true
        verify-metadata: true


    # Works locally, but for some reason fails in the workflow
    # - name: Test install from TestPyPI
    #   run: |
    #     sleep 120  # Wait for package to be available
    #     uv tool install quartofetch@${{ env.new_version }} --index https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ --index-strategy unsafe-best-match
